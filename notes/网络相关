     

一 openURL
iOS系统版本 < 10.0
     
     NSURL *url= [NSURL URLWithString:@"prefs:root=LOCATION_SERVICES"];
     if( [[UIApplication sharedApplication]canOpenURL:url] ) {
     [[UIApplication sharedApplication]openURL:url];
     }
     iOS系统版本 >= 10.0
     
     if( [[UIApplication sharedApplication]canOpenURL:url] ) {
     [[UIApplication sharedApplication]openURL:url options:@{}completionHandler:^(BOOL        success) {
     }];
     }
     三个参数
     打开APP的URL
     可选字典参数(请参见以下有效条目)。传入一个空字典可以达到openURL:一样的行为。
     执行成功后completionhandler在主队列中回调。如果你并不关心它的返回状态也可以传空。
    方式一：
    iOS系统版本 <= iOS7 , 只能跳转到 系统设置页面
    
    NSURL *url= [NSURL URLWithString:@"prefs:root=LOCATION_SERVICES"];
    跳转到: 隐私-定位服务。
     
    prefs:root=某项服务
    系统设置:prefs:root=INTERNET_TETHERING
    WIFI设置:prefs:root=WIFI
    蓝牙设置:prefs:root=Bluetooth
    系统通知:prefs:root=NOTIFICATIONS_ID
    通用设置:prefs:root=General
    显示设置:prefs:root=DISPLAY&BRIGHTNESS
    壁纸设置:prefs:root=Wallpaper
    声音设置:prefs:root=Sounds
    隐私设置:prefs:root=privacy
    蜂窝网路:prefs:root=MOBILE_DATA_SETTINGS_ID
    音乐:prefs:root=MUSIC
    APP Store:prefs:root=STORE
    Notes:prefs:root=NOTES
    Safari:prefs:root=Safari
    Music:prefs:root=MUSIC
    photo":prefs:root=Photos
    这种跳转方式，都是跳转到系统的设置界面。
    
    方式二 :
    iOS系统版本 >= iOS8 ，支持跳转到第三方应用的设置界面中
     
    使用prefs:root=bundleID ,bundleID是你第三方应用工程的唯一ID
    局限性：只支持iOS8,iOS9系统,在iOS10系统上，不会跳转。 在iOS7系统上，仅仅只是跳转到设置应用，不推荐使用。
    
    如果需要继续向项目内层进行跳转，可以通过添加path路径的方式，如下：
    
    关于本机:prefs:root=General&path=About
    软件升级:prefs:root=General&path=SOFTWARE_UPDATE_LINK
    日期时间:prefs:root=General&path=DATE_AND_TIME
    Accessibility:prefs:root=General&path=ACCESSIBILITY
    键盘设置:prefs:root=General&path=Keyboard
    VPN:prefs:root=General&path=VPN
    壁纸设置:@"prefs:root=Wallpaper
    声音设置:prefs:root=Sounds
    隐私设置:prefs:root=privacy
    APP Store:prefs:root=STORE
    还原设置:prefs:root=General&path=Reset
    应用通知:prefs:root=NOTIFICATIONS_ID&path=应用的boundleId
    更多参数字段自己查询
    
    方式三
    iOS系统版本 >= iOS10，支持跳转到自己应用设置，不支持跳转到系统设置
    
    NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
    UIApplicationOpenSettingsURLString字段，是在iOS8上才提供的，支持iOS8,iOS9,iOS10系统，推荐使用。
    iOS系统版本>= iOS10，支持跳转到自己应用设置，不支持跳转到系统设置
    只认
    
    NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
    跳转。
    而 prefs:root=bundleID和 prefs:root=服务 都将不起作用。



iOS8以后，苹果推出了新框架Wekkit，提供了替换UIWebView的组件WKWebView。各种UIWebView的问题没有了，速度更快了，占用内存少了，一句话，WKWebView是App内部加载网页的最佳选择！

先看下 WKWebView的特性：

在性能、稳定性、功能方面有很大提升（最直观的体现就是加载网页是占用的内存，模拟器加载百度与开源中国网站时，WKWebView占用23M，而UIWebView占用85M）；
允许JavaScript的Nitro库加载并使用（UIWebView中限制）；
支持了更多的HTML5特性；
高达60fps的滚动刷新率以及内置手势；
将UIWebViewDelegate与UIWebView重构成了14类与3个协议（查看苹果官方文档）；
然后从以下几个方面说下WKWebView的基本用法：

加载网页
加载的状态回调
新的WKUIDelegate协议
动态加载并运行JS代码
webView 执行JS代码
JS调用App注册过的方法

目前，大多数App需要支持iOS7以上的版本，而WKWebView只在iOS8后才能用，所以需要一个兼容性方案，既iOS7下用UIWebView，iOS8后用WKWebView。这个库提供了这种兼容性方案：https://github.com/wangyangcc/IMYWebView

原文链接：http://www.jianshu.com/p/6ba2507445e4
http://www.brighttj.com/ios/ios-wkwebview-new-features-and-use.html
http://www.wangyangdev.com/2015/11/13/使用WKWebView替换UIWebView/



TCP的全称为传输控制协议。这种协议可以提供面向连接的、可靠的、点到点的通信。
UDP全称为用户数据报协议，它可以提供非连接的不可靠的点到多点的通信。

TCP/IP 建立连接的过程 
在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。 
第一次握手：建立连接时，客户端发送连接请求到服务器，并进入SYN_SEND状态，等待服务器确认； 
第二次握手：服务器收到客户端连接请求，向客户端发送允许连接应答，此时服务器进入SYN_RECV状态； 
第三次握手：客户端收到服务器的允许连接应答，向服务器发送确认，客户端和服务器进入通信状态，完成三次握手。 
（所谓的三次握手就是要有三次连接信息的发送/接收过程。TCP连接的建立需要进行三次连接信息的发送/接收。）
